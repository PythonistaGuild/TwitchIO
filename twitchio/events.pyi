from typing import TYPE_CHECKING

if TYPE_CHECKING:
    import twitchio

    from .authentication import UserTokenPayload

async def event_oauth_authorized(payload: UserTokenPayload) -> None:
    """Event dispatched when a user authorizes your Client-ID via Twitch OAuth on a built-in web adapter.

    The default behaviour of this event is to add the authorized token to the client.
    See: :class:`~twitchio.Client.add_token` for more details.

    Parameters
    ----------
    payload: UserTokenPayload
    """

async def event_ready() -> None:
    """Event dispatched when the Client is ready and has completed login."""

# Eventsub Events

# AutoMod
async def event_automod_message_hold(payload: twitchio.AutomodMessageHold) -> None: ...
async def event_automod_message_update(payload: twitchio.AutomodMessageUpdate) -> None: ...
async def event_automod_settings_update() -> None: ...
async def event_automod_terms_update() -> None: ...

# Channel/Broadcaster
async def event_channel_update() -> None: ...
async def event_follow() -> None: ...
async def event_ad_break() -> None: ...
async def event_chat_clear() -> None: ...
async def event_chat_clear_user() -> None: ...
async def event_cheer() -> None: ...
async def event_raid() -> None: ...

# Messages/Chat
async def event_message() -> None: ...
async def event_message_whisper() -> None: ...
async def event_message_delete() -> None: ...
async def event_chat_notification() -> None: ...
async def event_chat_settings_update() -> None: ...
async def event_chat_user_message_hold() -> None: ...
async def event_chat_user_message_update() -> None: ...

# Shared Chat
async def event_shared_chat_begin() -> None: ...
async def event_shared_chat_update() -> None: ...
async def event_shared_chat_end() -> None: ...

# Subscriptions
async def event_subscription() -> None: ...
async def event_subscription_end() -> None: ...
async def event_subscription_gift() -> None: ...
async def event_subscription_message() -> None: ...

# Bans
async def event_ban() -> None: ...
async def event_unban() -> None: ...
async def event_unban_request() -> None: ...
async def event_unban_request_resolve() -> None: ...

# Warnings
async def event_warning_acknowledge() -> None: ...
async def event_warning_send() -> None: ...

# Moderation and VIPs
async def event_mod_action() -> None: ...
async def event_moderator_add() -> None: ...
async def event_moderator_remove() -> None: ...
async def event_vip_add() -> None: ...
async def event_vip_remove() -> None: ...

# Redemptions and Rewards
async def event_automatic_redemption_add() -> None: ...
async def event_custom_reward_add() -> None: ...
async def event_custom_reward_update() -> None: ...
async def event_custom_reward_remove() -> None: ...
async def event_custom_redemption_add() -> None: ...
async def event_custom_redemption_update() -> None: ...

# Polls
async def event_poll_begin() -> None: ...
async def event_poll_progress() -> None: ...
async def event_poll_end() -> None: ...

# Suspicious Users
async def event_suspicious_user_message() -> None: ...
async def event_suspicious_user_update() -> None: ...

# Charity Campaigns
async def event_charity_campaign_donate() -> None: ...
async def event_charity_campaign_start() -> None: ...
async def event_charity_campaign_progress() -> None: ...
async def event_charity_campaign_stop() -> None: ...

# Goals
async def event_goal_begin() -> None: ...
async def event_goal_peogress() -> None: ...
async def event_goal_end() -> None: ...

# Hype Train
async def event_hype_train() -> None: ...
async def event_hype_train_progress() -> None: ...
async def event_hype_train_end() -> None: ...

# Shield Mode
async def event_shield_mode_begin() -> None: ...
async def event_shield_mode_end() -> None: ...

# Shoutouts
async def event_shoutout_create() -> None: ...
async def event_shoutout_receive() -> None: ...

# Streams
async def event_stream_online(payload: twitchio.StreamOnline) -> None: ...
async def event_stream_offline(payload: twitchio.StreamOffline) -> None: ...

# OAuth
async def event_user_authorization_grant() -> None: ...
async def event_user_authorization_revoke() -> None: ...

# Users
async def event_user_update() -> None: ...
